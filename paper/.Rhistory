mean_exposure_other = mean(exposure_other)) %>%
ungroup() %>%
# English exposure = French exposure
filter(mean_exposure_eng == mean_exposure_fr) %>%
# count how many
nrow()
# Maternal education level in years
mean_maternaledu_stringent <- clean_demog_stringent %>%
filter(monolingual != 1 & !is.na(completed_both)) %>%
select(subject_id, primary_caregiver_eng, primary_caregiver_education_eng) %>% # keeping "primary_caregiver_education_eng" because all listed mother as the primary caregiver
distinct(subject_id, .keep_all = TRUE) %>%
group_by(primary_caregiver_eng) %>%
summarize(mean_edu_level = mean(primary_caregiver_education_eng, na.rm=T),
sd_edu_level = sd(primary_caregiver_education_eng, na.rm=T),
min_edu_level = min(primary_caregiver_education_eng, na.rm=T),
max_edu_level = max(primary_caregiver_education_eng, na.rm=T))
# how many mothers completed a university degree or higher (years 16 = university graduate, > 16 = advanced degree)
n_maternal_uni_stringent <- clean_demog_stringent %>%
filter(monolingual != 1 & !is.na(completed_both)) %>%
select(subject_id, primary_caregiver_eng, primary_caregiver_education_eng) %>% # keeping "primary_caregiver_education_eng" because all listed mother as the primary caregiver
distinct(subject_id, .keep_all = TRUE) %>%
# university graduate? (1 = yes, 0 = no)
mutate(university_degree = if_else(primary_caregiver_education_eng >= 16, 1, 0)) %>%
# summary
dplyr::count(university_degree) %>%
summarize(university_degree = university_degree,
n = n,
percentage = n/sum(n)*100)
# complete list
keepers_cognate_full <- read.csv(here::here("data_keepers/public_keepers_cognate_full.csv"))
## calculate to see: (1) how many total words were produced; (2) if the TE pairs have been produced (i.e., both words in English and French are acquired); (3) how many cognate or non-cognate words have been produced (i.e., either word acquired only in one language or words acquired in both language)
keepers_cognate_full_wide <- keepers_cognate_full %>%
# remove unnecessary variables
select(-c(english_item, french_item)) %>%
# calculate total number of eng/fr words acquired
group_by(subject_id, n_months) %>%
mutate(total_eng_acquired = sum(eng_acquired, na.rm=T),
total_fr_acquired = sum(fr_acquired, na.rm=T)) %>%
ungroup() %>%
# calculate total number of words acquired (eng + fr)
mutate(total_acquired = total_eng_acquired + total_fr_acquired,
# percentage of words acquired
percent_word_acquired = total_acquired/(537*2)*100) %>%
# calculate to see if the TE pairs have been produced
mutate(TE_acquired = case_when(eng_acquired == 1 & fr_acquired == 1 ~ 1,
TRUE ~ 0)) %>%
# remove the eng_acquired and fr_acquired variables
select(-c(eng_acquired, fr_acquired)) %>%
# unite french_item_id with word_pairs to facilitate the pivot_wider step
unite(word_pairs_withID, c(english_item_id, word_pairs, french_item_id), remove=FALSE) %>%
select(-c(word_pairs, english_item_id, french_item_id)) %>%
# create wide data
pivot_wider(names_from = word_pairs_withID, values_from = TE_acquired) %>%
mutate(total_TE_acquired = rowSums(.[17:553], na.rm=T),
percent_TE_acquired = case_when(cognate_status == "cognate" ~ total_TE_acquired/131*100,
cognate_status == "non-cognate" ~ total_TE_acquired/406*100)) %>%
# calculate total number of TEs (regardless of cognate status)
group_by(subject_id, n_months) %>%
mutate(total_all_TE_acquired = sum(total_TE_acquired, na.rm=T),
percent_all_TE_acquired = total_all_TE_acquired/537*100) %>%
ungroup()
# matched list
keepers_cognate_matched <- read.csv(here::here("data_keepers/public_keepers_cognate_matched.csv"))
## calculate to see: (1) how many total words were produced; (2) if the TE pairs have been produced (i.e., both words in English and French are acquired)
## (3) how many cognate or non-cognate words have been produced (i.e., either word acquired only in one language or words acquired in both language)
keepers_cognate_matched_wide <- keepers_cognate_matched %>%
# remove unnecessary variables
select(-c(english_item_id, english_item, Eng_AoA, french_item_id, french_item, Fr_AoA)) %>%
# calculate total number of eng/fr words acquired within the matched list
group_by(subject_id, n_months) %>%
mutate(total_eng_acquired = sum(eng_acquired, na.rm=T),
total_fr_acquired = sum(fr_acquired, na.rm=T)) %>%
ungroup() %>%
# calculate total number of words acquired (eng + fr)
mutate(total_acquired = total_eng_acquired + total_fr_acquired,
# percentage of words acquired
percent_word_acquired = total_acquired/(162*2)*100) %>%
# calculate to see if the TE pairs have been produced
mutate(TE_acquired = case_when(eng_acquired == 1 & fr_acquired == 1 ~ 1,
TRUE ~ 0))  %>%
# remove the eng_acquired and fr_acquired variables
select(-c(eng_acquired, fr_acquired)) %>%
pivot_wider(names_from = word_pairs, values_from = TE_acquired) %>%
mutate(total_TE_acquired = rowSums(.[17:178], na.rm=T)) %>%
mutate(percent_TE_acquired = total_TE_acquired/81*100) %>%
# calculate total number of TEs (regardless of cognate status)
group_by(subject_id, n_months) %>%
mutate(total_all_TE_acquired = sum(total_TE_acquired, na.rm=T),
percent_all_TE_acquired = total_all_TE_acquired/162*100) %>%
ungroup()
library(rmarkdown)
library(knitr)
library(papaja)
library(kableExtra)
library(english)
library(linguisticsdown)
library(here)
library(tidyverse)
library(tidylog)
library(wordbankr)
library(matrixStats)
library(lme4)
library(lmerTest)
library(ggplot2)
library(patchwork)
library(gridExtra)
library("ggpubr")
library(broom)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, cache = TRUE)
# read in the final cleaned keepers_data
clean_demog <- read.csv(here::here("data_keepers/public_clean_demog.csv"))
exclusion <- read.csv(here::here("data_keepers/exclusions.csv"))
public_keepers_cognate_full <- read.csv(here::here("data_keepers/public_keepers_cognate_full.csv"))
public_keepers_cognate_matched <- read.csv(here::here("data_keepers/public_keepers_cognate_matched.csv"))
# ---------- 25-75% language exposure criterion ----------
# keep only subjects with 25-75% language exposure
exceed_25_75_langexp <- clean_demog %>%
filter(monolingual != 1 & !is.na(completed_both)) %>%
select(subject_id, n_months, exposure_eng, exposure_fr, exposure_other) %>%
filter(!is.na(exposure_eng)) %>%
mutate(flag_langexp = case_when(exposure_eng < 25 | exposure_eng > 75 ~ 1,
exposure_fr < 25 | exposure_fr > 75 ~ 1,
TRUE ~ 0)) %>%
# which participant has a larger range throughout the study
group_by(subject_id) %>%
mutate(n_flag_langexp = sum(flag_langexp)) %>%
filter(n_flag_langexp != 0) %>%
# extract subject_id for later exclusion
distinct(subject_id)
clean_demog_stringent <- clean_demog %>%
anti_join(exceed_25_75_langexp)
# number of participants after removing these 9 participants
total_n_stringent <- clean_demog_stringent %>%
filter(monolingual != 1) %>%
distinct(subject_id) %>%
nrow()
# number of girls
n_female_stringent <- clean_demog_stringent %>%
filter(monolingual != 1) %>%
select(subject_id, sex) %>%
distinct(subject_id, .keep_all = TRUE) %>%
filter(sex == "Female") %>%
nrow()
# Age range for 1st month data entry
mean_age_1st_entry_stringent <- clean_demog_stringent %>%
filter(monolingual != 1) %>%
filter(n_months == 1) %>%
summarize(mean_age = mean(age_months, na.rm=T),
sd_age = sd(age_months, na.rm=T),
min_age = min(age_months, na.rm=T),
max_age = max(age_months, na.rm=T))
# Age range for final month data entry
mean_age_final_entry_stringent <- clean_demog_stringent %>%
filter(monolingual != 1) %>%
arrange(subject_id, n_months) %>%
# get the last row of data within each participant
group_by(subject_id) %>%
slice(n()) %>%
ungroup() %>%
# summarize
summarize(mean_age = mean(age_months, na.rm=T),
sd_age = sd(age_months, na.rm=T),
min_age = min(age_months, na.rm=T),
max_age = max(age_months, na.rm=T)) # the oldest age is 27m
# Total number of completed CDIs
## Completed English CDIs
n_eng_administration_stringent <- clean_demog_stringent  %>%
filter(monolingual != 1) %>%
select(c(subject_id, n_months, completed_eng)) %>%
group_by(subject_id) %>%
filter(!is.na(completed_eng)) %>%
nrow()
## Completed French CDIs
n_fr_administration_stringent <- clean_demog_stringent  %>%
filter(monolingual != 1) %>%
select(c(subject_id, n_months, completed_fr)) %>%
group_by(subject_id) %>%
filter(!is.na(completed_fr)) %>%
nrow()
## Completed both English and French CDIs
n_both_administration_stringent <- clean_demog_stringent %>%
filter(monolingual != 1) %>%
select(c(subject_id, n_months, completed_both)) %>%
group_by(subject_id) %>%
filter(completed_both == TRUE) %>%
nrow()
## number of participants after retaining completed both English and French CDIs
n_subject_both_administration_stringent <- clean_demog_stringent %>%
filter(monolingual != 1) %>%
select(c(subject_id, n_months, completed_both)) %>%
group_by(subject_id) %>%
filter(completed_both == TRUE) %>%
distinct(subject_id) %>%
nrow()
# Number of participants who contributed data more than one time point
n_multiple_entry_stringent <- clean_demog_stringent %>%
filter(monolingual != 1 & !is.na(completed_both)) %>%
group_by(subject_id) %>%
dplyr::count(subject_id) %>%
filter(n > 1) %>%
nrow()
# Average number of completed CDIs
n_avg_entries_stringent <- clean_demog_stringent  %>%
filter(monolingual != 1 & !is.na(completed_both)) %>%
group_by(subject_id) %>%
dplyr::count(completed_eng) %>%
filter(!is.na(completed_eng)) %>%
ungroup()%>%
summarize(mean_entry = mean(n, na.rm=T),
sd_entry = sd(n, na.rm=T),
min_entry = min(n, na.rm=T),
max_entry = max(n, na.rm=T))
# Average language exposure (weighted mean is calculated as participants contributed different number of LEQ update data)
## weighted mean across all participants
mean_langexp_stringent <- clean_demog_stringent %>%
filter(monolingual != 1 & !is.na(completed_both)) %>%
select(subject_id, n_months, exposure_eng, exposure_fr, exposure_other) %>%
filter(!is.na(exposure_eng)) %>%
group_by(subject_id) %>%
mutate(count = n()) %>%
ungroup() %>%
pivot_longer(c(exposure_eng, exposure_fr, exposure_other), names_to = "language", values_to = "exposure") %>%
group_by(language) %>%
summarize(mean_exposure = round(weightedMean(exposure, count), 1),
sd_exposure = round(weightedSd(exposure, count), 1))
## minimum and maximum of individual averages
range_langexp_stringent <- clean_demog_stringent %>%
filter(monolingual != 1 & !is.na(completed_both)) %>%
select(subject_id, n_months, exposure_eng, exposure_fr, exposure_other) %>%
filter(!is.na(exposure_eng)) %>%
group_by(subject_id) %>%
# averaging within participant
summarize(mean_exposure_eng = mean(exposure_eng),
mean_exposure_fr = mean(exposure_fr),
mean_exposure_other = mean(exposure_other)) %>%
ungroup() %>%
# minimum and maximum of the individual averages
pivot_longer(c(mean_exposure_eng, mean_exposure_fr, mean_exposure_other), names_to = "language", values_to = "mean_exposure") %>%
group_by(language) %>%
summarize(min_exposure = min(mean_exposure),
max_exposure = max(mean_exposure))
# Number of English dominant
## weighted mean across all participants
mean_engdom_stringent <- clean_demog_stringent %>%
filter(monolingual != 1 & !is.na(completed_both)) %>%
select(subject_id, n_months, exposure_eng, exposure_fr, exposure_other) %>%
filter(!is.na(exposure_eng)) %>%
group_by(subject_id) %>%
# averaging within participant to define dominance
mutate(count = n(),
mean_exposure_eng = mean(exposure_eng),
mean_exposure_fr = mean(exposure_fr),
mean_exposure_other = mean(exposure_other)) %>%
ungroup() %>%
filter(mean_exposure_eng > mean_exposure_fr) %>% # English exposure > French exposure
select(-c(matches("mean"))) %>%
# calculating weigthed mean
pivot_longer(c(exposure_eng, exposure_fr, exposure_other), names_to = "language", values_to = "exposure") %>%
group_by(language) %>%
summarize(number = length(unique(subject_id)),
mean_exposure = round(weightedMean(exposure, count), 1),
sd_exposure = round(weightedSd(exposure, count), 1))
## minimum and maximum of individual averages
range_engdom_stringent <-clean_demog_stringent %>%
filter(monolingual != 1 & !is.na(completed_both)) %>%
select(subject_id, n_months, exposure_eng, exposure_fr, exposure_other) %>%
filter(!is.na(exposure_eng)) %>%
group_by(subject_id) %>%
# averaging within participant
summarize(mean_exposure_eng = mean(exposure_eng),
mean_exposure_fr = mean(exposure_fr),
mean_exposure_other = mean(exposure_other)) %>%
ungroup() %>%
# English exposure > French exposure
filter(mean_exposure_eng > mean_exposure_fr) %>%
# minimum and maximum of the individual averages
pivot_longer(c(mean_exposure_eng, mean_exposure_fr, mean_exposure_other), names_to = "language", values_to = "mean_exposure") %>%
group_by(language) %>%
summarize(number = length(unique(subject_id)),
min_exposure = min(mean_exposure),
max_exposure = max(mean_exposure))
# Number of French dominant
## weighted mean across all participants
mean_frdom_stringent <- clean_demog_stringent %>%
filter(monolingual != 1 & !is.na(completed_both)) %>%
select(subject_id, n_months, exposure_eng, exposure_fr, exposure_other) %>%
filter(!is.na(exposure_eng)) %>%
group_by(subject_id) %>%
# averaging within participant to define dominance
mutate(count = n(),
mean_exposure_eng = mean(exposure_eng),
mean_exposure_fr = mean(exposure_fr),
mean_exposure_other = mean(exposure_other)) %>%
ungroup() %>%
filter(mean_exposure_eng < mean_exposure_fr) %>% # English exposure < French exposure
select(-c(matches("mean"))) %>%
# calculating weigthed mean
pivot_longer(c(exposure_eng, exposure_fr, exposure_other), names_to = "language", values_to = "exposure") %>%
group_by(language) %>%
summarize(number = length(unique(subject_id)),
mean_exposure = round(weightedMean(exposure, count), 1),
sd_exposure = round(weightedSd(exposure, count), 1))
## minimum and maximum of individual averages
range_frdom_stringent <- clean_demog_stringent %>%
filter(monolingual != 1 & !is.na(completed_both)) %>%
select(subject_id, n_months, exposure_eng, exposure_fr, exposure_other) %>%
filter(!is.na(exposure_eng)) %>%
group_by(subject_id) %>%
# averaging within participant
summarize(mean_exposure_eng = mean(exposure_eng),
mean_exposure_fr = mean(exposure_fr),
mean_exposure_other = mean(exposure_other)) %>%
ungroup() %>%
# English exposure < French exposure
filter(mean_exposure_eng < mean_exposure_fr) %>%
# minimum and maximum of the individual averages
pivot_longer(c(mean_exposure_eng, mean_exposure_fr, mean_exposure_other), names_to = "language", values_to = "mean_exposure") %>%
group_by(language) %>%
summarize(number = length(unique(subject_id)),
min_exposure = min(mean_exposure),
max_exposure = max(mean_exposure))
# Number of equal exposure to English and French
n_equalexp_stringent <- clean_demog_stringent %>%
filter(monolingual != 1 & !is.na(completed_both)) %>%
select(subject_id, n_months, exposure_eng, exposure_fr, exposure_other) %>%
filter(!is.na(exposure_eng)) %>%
group_by(subject_id) %>%
# averaging within participant
summarize(mean_exposure_eng = mean(exposure_eng),
mean_exposure_fr = mean(exposure_fr),
mean_exposure_other = mean(exposure_other)) %>%
ungroup() %>%
# English exposure = French exposure
filter(mean_exposure_eng == mean_exposure_fr) %>%
# count how many
nrow()
# Maternal education level in years
mean_maternaledu_stringent <- clean_demog_stringent %>%
filter(monolingual != 1 & !is.na(completed_both)) %>%
select(subject_id, primary_caregiver_eng, primary_caregiver_education_eng) %>% # keeping "primary_caregiver_education_eng" because all listed mother as the primary caregiver
distinct(subject_id, .keep_all = TRUE) %>%
group_by(primary_caregiver_eng) %>%
summarize(mean_edu_level = mean(primary_caregiver_education_eng, na.rm=T),
sd_edu_level = sd(primary_caregiver_education_eng, na.rm=T),
min_edu_level = min(primary_caregiver_education_eng, na.rm=T),
max_edu_level = max(primary_caregiver_education_eng, na.rm=T))
# how many mothers completed a university degree or higher (years 16 = university graduate, > 16 = advanced degree)
n_maternal_uni_stringent <- clean_demog_stringent %>%
filter(monolingual != 1 & !is.na(completed_both)) %>%
select(subject_id, primary_caregiver_eng, primary_caregiver_education_eng) %>% # keeping "primary_caregiver_education_eng" because all listed mother as the primary caregiver
distinct(subject_id, .keep_all = TRUE) %>%
# university graduate? (1 = yes, 0 = no)
mutate(university_degree = if_else(primary_caregiver_education_eng >= 16, 1, 0)) %>%
# summary
dplyr::count(university_degree) %>%
summarize(university_degree = university_degree,
n = n,
percentage = n/sum(n)*100)
# complete list
keepers_cognate_full <- read.csv(here::here("data_keepers/public_keepers_cognate_full.csv"))
## calculate to see: (1) how many total words were produced; (2) if the TE pairs have been produced (i.e., both words in English and French are acquired); (3) how many cognate or non-cognate words have been produced (i.e., either word acquired only in one language or words acquired in both language)
keepers_cognate_full_wide <- keepers_cognate_full %>%
# remove unnecessary variables
select(-c(english_item, french_item)) %>%
# calculate total number of eng/fr words acquired
group_by(subject_id, n_months) %>%
mutate(total_eng_acquired = sum(eng_acquired, na.rm=T),
total_fr_acquired = sum(fr_acquired, na.rm=T)) %>%
ungroup() %>%
# calculate total number of words acquired (eng + fr)
mutate(total_acquired = total_eng_acquired + total_fr_acquired,
# percentage of words acquired
percent_word_acquired = total_acquired/(537*2)*100) %>%
# calculate to see if the TE pairs have been produced
mutate(TE_acquired = case_when(eng_acquired == 1 & fr_acquired == 1 ~ 1,
TRUE ~ 0)) %>%
# remove the eng_acquired and fr_acquired variables
select(-c(eng_acquired, fr_acquired)) %>%
# unite french_item_id with word_pairs to facilitate the pivot_wider step
unite(word_pairs_withID, c(english_item_id, word_pairs, french_item_id), remove=FALSE) %>%
select(-c(word_pairs, english_item_id, french_item_id)) %>%
# create wide data
pivot_wider(names_from = word_pairs_withID, values_from = TE_acquired) %>%
mutate(total_TE_acquired = rowSums(.[17:553], na.rm=T),
percent_TE_acquired = case_when(cognate_status == "cognate" ~ total_TE_acquired/131*100,
cognate_status == "non-cognate" ~ total_TE_acquired/406*100)) %>%
# calculate total number of TEs (regardless of cognate status)
group_by(subject_id, n_months) %>%
mutate(total_all_TE_acquired = sum(total_TE_acquired, na.rm=T),
percent_all_TE_acquired = total_all_TE_acquired/537*100) %>%
ungroup()
keepers_cognate_full_stringent <- keepers_cognate_full %>%
anti_join(exceed_25_75_langexp)
keepers_cognate_full_wide_stringent <- keepers_cognate_full_wide %>%
anti_join(exceed_25_75_langexp)
# descriptives
## mean total words acquired
full_mean_total_stringent <- keepers_cognate_full_wide_stringent %>%
select(subject_id, n_months, total_eng_acquired, total_fr_acquired, total_acquired, percent_word_acquired,
total_all_TE_acquired, percent_all_TE_acquired) %>%
distinct(subject_id, n_months, .keep_all = TRUE) %>%
pivot_longer(-c(subject_id, n_months), names_to = "type", values_to = "number") %>%
group_by(type) %>%
summarize(n_subject = n_distinct(subject_id),
mean_number = mean(number, na.rm=T),
sd_number = sd(number, na.rm=T),
min_number = min(number, na.rm=T),
max_number = max(number, na.rm=T))
# matched list
keepers_cognate_matched <- read.csv(here::here("data_keepers/public_keepers_cognate_matched.csv"))
## calculate to see: (1) how many total words were produced; (2) if the TE pairs have been produced (i.e., both words in English and French are acquired)
## (3) how many cognate or non-cognate words have been produced (i.e., either word acquired only in one language or words acquired in both language)
keepers_cognate_matched_wide <- keepers_cognate_matched %>%
# remove unnecessary variables
select(-c(english_item_id, english_item, Eng_AoA, french_item_id, french_item, Fr_AoA)) %>%
# calculate total number of eng/fr words acquired within the matched list
group_by(subject_id, n_months) %>%
mutate(total_eng_acquired = sum(eng_acquired, na.rm=T),
total_fr_acquired = sum(fr_acquired, na.rm=T)) %>%
ungroup() %>%
# calculate total number of words acquired (eng + fr)
mutate(total_acquired = total_eng_acquired + total_fr_acquired,
# percentage of words acquired
percent_word_acquired = total_acquired/(162*2)*100) %>%
# calculate to see if the TE pairs have been produced
mutate(TE_acquired = case_when(eng_acquired == 1 & fr_acquired == 1 ~ 1,
TRUE ~ 0))  %>%
# remove the eng_acquired and fr_acquired variables
select(-c(eng_acquired, fr_acquired)) %>%
pivot_wider(names_from = word_pairs, values_from = TE_acquired) %>%
mutate(total_TE_acquired = rowSums(.[17:178], na.rm=T)) %>%
mutate(percent_TE_acquired = total_TE_acquired/81*100) %>%
# calculate total number of TEs (regardless of cognate status)
group_by(subject_id, n_months) %>%
mutate(total_all_TE_acquired = sum(total_TE_acquired, na.rm=T),
percent_all_TE_acquired = total_all_TE_acquired/162*100) %>%
ungroup()
keepers_cognate_matched_stringent <- keepers_cognate_matched %>%
anti_join(exceed_25_75_langexp)
keepers_cognate_matched_wide_stringent <- keepers_cognate_matched_wide %>%
anti_join(exceed_25_75_langexp)
# descriptives
## mean total words acquired
matched_mean_total_stringent <- keepers_cognate_matched_wide_stringent %>%
select(subject_id, n_months, total_eng_acquired, total_fr_acquired, total_acquired, percent_word_acquired,
total_all_TE_acquired, percent_all_TE_acquired) %>%
distinct(subject_id, n_months, .keep_all = TRUE) %>%
pivot_longer(-c(subject_id, n_months), names_to = "type", values_to = "number") %>%
group_by(type) %>%
summarize(n_subject = n_distinct(subject_id),
mean_number = mean(number, na.rm=T),
sd_number = sd(number, na.rm=T),
min_number = min(number, na.rm=T),
max_number = max(number, na.rm=T))
full_mean_total_stringent
round(full_mean_total_stringent$mean_number[full_mean_total_stringent$type=="total_acquired"])
round(full_mean_total_stringent$sd_number[full_mean_total_stringent$type=="total_acquired"])
round(full_mean_total_stringent$sd_number[full_min_total_stringent$type=="total_acquired"])
round(full_mean_total_stringent$min_number[full_mean_total_stringent$type=="total_acquired"])
round(full_mean_total_stringent$max_number[full_mean_total_stringent$type=="total_acquired"])
round(full_mean_total_stringent$mean_number[full_mean_total_stringent$type=="percent_word_acquired"])
round(full_mean_total_stringent$mean_number[full_mean_total_stringent$type=="percent_word_acquired"],1)
round(full_mean_total_stringent$mean_number[full_mean_total_stringent$type=="percent_word_acquired"],2)
round(full_mean_total_stringent$mean_number[full_mean_total_stringent$type=="percent_word_acquired"],1)
full_mean_total_stringent
round(full_mean_total_stringent$mean_number[full_mean_total_stringent$type=="total_all_TE_acquired"])
round(full_mean_total_stringent$sd_number[full_mean_total_stringent$type=="total_all_TE_acquired"],2)
round(full_mean_total_stringent$min_number[full_mean_total_stringent$type=="total_all_TE_acquired"])
round(full_mean_total_stringent$max_number[full_mean_total_stringent$type=="total_all_TE_acquired"])
round(full_mean_total_stringent$max_number[full_mean_total_stringent$type=="percent_all_TE_acquired"])
round(full_mean_total_stringent$mean_number[full_mean_total_stringent$type=="percent_all_TE_acquired"])
round(full_mean_total_stringent$mean_number[full_mean_total_stringent$type=="percent_all_TE_acquired"],2)
matched_mean_total_stringent
round(matched_mean_total_stringent$mean_number[full_mean_total_stringent$type=="total_acquired"])
round(matched_mean_total_stringent$sd_number[full_mean_total_stringent$type=="total_acquired"],2)
round(matched_mean_total_stringent$min_number[full_mean_total_stringent$type=="total_acquired"])
round(matched_mean_total_stringent$max_number[full_mean_total_stringent$type=="total_acquired"])
round(matched_mean_total_stringent$max_number[full_mean_total_stringent$type=="percent_word_acquired"])
round(matched_mean_total_stringent$mean_number[full_mean_total_stringent$type=="percent_word_acquired"],2)
round(matched_mean_total_stringent$mean_number[full_mean_total_stringent$type=="percent_word_acquired"],1)
round(matched_mean_total_stringent$mean_number[full_mean_total_stringent$type=="percent_word_acquired"],2)
round(matched_mean_total_stringent$mean_number[full_mean_total_stringent$type=="total_all_TE_acquired"],2)
round(matched_mean_total_stringent$mean_number[full_mean_total_stringent$type=="total_all_TE_acquired"])
round(matched_mean_total_stringent$sd_number[full_mean_total_stringent$type=="total_all_TE_acquired"],2)
round(matched_mean_total_stringent$min_number[full_mean_total_stringent$type=="total_all_TE_acquired"])
round(matched_mean_total_stringent$max_number[full_mean_total_stringent$type=="total_all_TE_acquired"])
# Dependent Variable 1: Cognate Words Versus Non-Cognate Words
## average age in the sample
mean_age_stringent <- keepers_cognate_full_stringent %>%
distinct(subject_id, .keep_all = T) %>%
summarize(mean_age = mean(age_days, na.rm = T))
mean_age_stringent
round(mean_age_stringent,2)
round(mean_age_stringent,1)
mean_age_stringent/365
mean_age_stringent/(365/12)
round(mean_age_stringent/(365/12))
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex()
update.packages(ask = FALSE, checkBuilt = TRUE)
yes
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
unlink("CogVocab_supplemental_cache", recursive = TRUE)
install.packages("tinytex")
options(tinytex.verbose = TRUE)
unlink("CogVocab_supplemental_cache", recursive = TRUE)
tinytex::tlmgr_update()
tinytex::install_prebuilt()
tinytex::reinstall_tinytex()
